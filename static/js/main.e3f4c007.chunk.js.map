{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["decode","require","request","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","keyword","data","searchResult","favourites","handleChange","bind","assertThisInitialized","handleSubmit","handleAddFavourite","handleDeleteFavourite","event","setState","target","value","preventDefault","result","filter","item","body","includes","title","keywords","category","concat","favourite","id","get","res","_this2","_this$state","react_default","a","createElement","className","onSubmit","onChange","placeholder","type","index_es","icon","faSearch","map","onClick","faStar","ReactHtmlParser","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3f4c007.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\nimport ReactHtmlParser, {\n  processNodes,\n  convertNodeToElement,\n  htmlparser2\n} from \"react-html-parser\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { faStar } from \"@fortawesome/free-solid-svg-icons\";\n\nconst decode = require(\"decode-html\");\nconst request = require(\"superagent\");\nconst JSON_URL =\n  \"https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=2000\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keyword: \"\",\n      data: [],\n      searchResult: [],\n      favourites: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleAddFavourite = this.handleAddFavourite.bind(this);\n    this.handleDeleteFavourite = this.handleDeleteFavourite.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ keyword: event.target.value });\n    if (event.target.value === \"\") this.setState({ searchResult: [] });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const { keyword } = this.state;\n    const result = this.state.data.filter(item => {\n      if (\n        item.body.includes(keyword) ||\n        item.title.includes(keyword) ||\n        item.keywords.includes(keyword) ||\n        item.category.includes(keyword)\n      )\n        return true;\n      return false;\n    });\n    this.setState({\n      searchResult: result\n    });\n  }\n\n  handleAddFavourite(item) {\n    if (!this.state.favourites.includes(item))\n      this.setState({\n        favourites: this.state.favourites.concat(item)\n      });\n  }\n\n  handleDeleteFavourite(item) {\n    if (this.state.favourites.includes(item))\n      this.setState({\n        favourites: this.state.favourites.filter(\n          favourite => favourite.id !== item.id\n        )\n      });\n  }\n\n  async componentDidMount() {\n    const res = await request.get(JSON_URL);\n    this.setState({ data: res.body });\n  }\n\n  render() {\n    const { keyword, favourites, searchResult } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"spacer\" />\n        <header className=\"appHeader\">\n          <p>Toronto Waste Lookup</p>\n        </header>\n        <form onSubmit={this.handleSubmit} className=\"searchWrapper\">\n          <input\n            value={keyword}\n            onChange={this.handleChange}\n            placeholder=\"Keywords...\"\n            className=\"searchBar\"\n          />\n          <button type=\"submit\">\n            <FontAwesomeIcon icon={faSearch} />\n          </button>\n        </form>\n        <div className=\"items\">\n          {searchResult.map(item => (\n            <div className=\"item\">\n              <div className=\"itemTitle\">\n                {favourites.includes(item) ? (\n                  <div\n                    className=\"favouriteIcon\"\n                    onClick={() => this.handleDeleteFavourite(item)}\n                  >\n                    <FontAwesomeIcon icon={faStar} />\n                  </div>\n                ) : (\n                  <div\n                    className=\"normalIcon\"\n                    onClick={() => this.handleAddFavourite(item)}\n                  >\n                    <FontAwesomeIcon icon={faStar} />\n                  </div>\n                )}\n                {ReactHtmlParser(decode(item.title))}\n              </div>\n              <div className=\"itemDescription\">\n                {ReactHtmlParser(decode(item.body))}\n              </div>\n            </div>\n          ))}\n        </div>\n        {favourites.length > 0 && (\n          <div className=\"favouriteContainer\">\n            <div className=\"typography\">\n              <header>Favourites</header>\n            </div>\n            <div className=\"items\">\n              {favourites.map(item => (\n                <div className=\"item\">\n                  <div className=\"itemTitle\">\n                    <div\n                      className=\"favouriteIcon\"\n                      onClick={() => this.handleDeleteFavourite(item)}\n                    >\n                      <FontAwesomeIcon icon={faStar} />\n                    </div>\n                    {ReactHtmlParser(decode(item.title))}\n                  </div>\n                  <div className=\"itemDescription\">\n                    {ReactHtmlParser(decode(item.body))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}